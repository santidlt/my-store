# Propierty binding

• Es una forma de controlar dinámicamente algunos atributos HTML para que estos sean renderizados a partir una string, variable o atributo de un objeto de la capa lógica.
• Solo funcionan en una dirección desde la capa lógica (conponent.ts) al objeto destino (atributo html), a esto se le conoce como flujo de datos.
• Debemos vincular los valores del componente a los atributos html, esto logramos encerrando el atributo html entre “square brakets”.
• Los corchetes [ ] (square brakets) hacen que Angular evalúe el lado derecho de la asignación como una expresión dinámica. Sin los corchetes, Angular trata el lado derecho como un literal de cadena y establece la propiedad en ese valor estático.
•   <button disabled="false"></button> // dato fijo como string
•   <button [disabled]="btnDisabled"></button> //dato dinamico
• A menudo, “interpolation” y “Property Binding” pueden lograr los mismos resultados. Los siguientes pares de enlaces hacen lo mismo.
•   <p><img src="{{itemImageUrl}}"> is the <i>interpolated</i> image.</p>
•   <p><img [src]="itemImageUrl"> is the <i>property bound</i> image.</p>
• Utilice cualquiera de las formas cuando represente valores de datos como cadenas.
• Es preferible el metodo de “interpolation” para facilitar la lectura.
• Al establecer una propiedad de elemento en un valor de datos que no sea una cadena, debe usar “Property Binding”.
• Se recomienda comprender los “Event binding” para entender el flujo de datos de la aplicacion y como este interactua con “interpolation” y “Property Binding”.


# Event Binding

• El Event Binding le permite escuchar y responder a las acciones del usuario, como pulsaciones de teclas, movimientos del mouse, clics y toques (Atributos HTML y propiedades DOM).
• Para vincular un elemento html a un evento, debemos indicar el nombre del evento entre paréntesis a la izquierda de un signo igual y el nombre de una funcion entre comillas a la derecha, recuerda indicar que se trata de una funcion con los parentecis “nameFunction()” .
•   <button (click)="onSave()">Save</button>
• Usar () en el template html es sinonimo de llamar “addEventListener()”
• Podemos realizar eventos personalizados con “EventEmitter”
• Podemos llamar multiples eventos de la siguiente forma
•   <button (click)="clickEvent()" (mouseenter)="mouseEnterEvent()">Click Me</button>
• Podemos determinar un objetivo de evento de la siguiente manera
•   <button (click)="handleClick($event)">Save</button>
• Se recomienda comprender el flujo de datos de la aplicacion y como este interactua con la misma, existen tres tipos de enlaces:
o Enlace unidireccional [] para enlazar desde la capa logica (component.ts) a la vista (html).
o Enlace unidireccional () para enlazar de la vista (html) a la capa logica (component.ts).
o Enlace bidireccional [()] para enlazar una secuencia de vista bidireccional a la capa logica (component.ts).


# Data binding con ngModel

Importante recalcar que para hacer uso de ngModel debemos importar el “FormModule” y habilitar el mismo en app.module.ts
ngModel raliza un seguimiento del valor y el estado de validación de un control de formulario individual debido a las propiedades que hereda de FormControl es recomentado saber como funciona dicho proceso.
Podemos personalizar las validaciones que deberia tener un campo o el mismo formulario
Aqui utilizamos las variables de referencia (las que tienen el signo #) y debemos indicar que la variable debera tomar el valor del ngModel <<#nameInput=“ngModel”>>
Se pueden realizar las validaciones que normalmente encontramos en html y con “pattern” podemos especificar una comprobacion como exprecion regular
Podemos tener un flujo de datos unidireccional con [] o bidireccional con [()]

Acepta inputs

Cuando se utiliza el ngModel sin la etiqueta <form> es necesario proporcionar un “nombre de atributo” de manera que el control pueda ser registrado en el formulario padre bajo ese nombre.

//comportamiento del ngModel sin etiqueta <form>
   //html
   <input [(ngModel)]="name" #ctrl="ngModel" required>
   //capa logica
   name: string = '';
//Comportamiento dentro de un form
 //html
 <form #f="ngForm" (ngSubmit)="onSubmit(f)" novalidate>
  <input name="first" ngModel required #first="ngModel">
  <input name="last" ngModel>
      <button>Submit</button>
 </form>
   //capa logica
 onSubmit(f: NgForm) {
 console.log(f.value);  // { first: '', last: '' }
 console.log(f.valid);  // false
 }

En el contexto de un formulario principal, a menudo no es necesario incluir enlaces unidireccionales o bidireccionales, ya que el formulario principal se encarga de su  sincronizacion
